{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query allPosts($id:String!) {\\n\\t  article(id: $id) {\\n\\t    data {\\n\\t      id\\n\\t      title\\n\\t      subtitle\\n\\t      body\\n\\t      url\\n\\t      summary\\n\\t      hero_image {\\n\\t        url_1200_630\\n\\t      }\\n\\t    }\\n\\t  }\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Layout from '../components/MyLayout.js';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nexport var allPostsQuery = gql(_templateObject()); // export const allPostsQueryVars = {\n//   limit: 5\n// }\n\nexport default function PostList() {\n  return React.createElement(Query, {\n    query: allPostsQuery\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        _ref$data = _ref.data,\n        allPosts = _ref$data.allPosts,\n        _allPostsMeta = _ref$data._allPostsMeta,\n        fetchMore = _ref.fetchMore;\n    if (error) return React.createElement(ErrorMessage, {\n      message: \"Error loading posts.\"\n    });\n    if (loading) return React.createElement(\"div\", null, \"Loading\");\n    var areMorePosts = allPosts.length < _allPostsMeta.count;\n    return React.createElement(\"section\", null, React.createElement(\"ul\", null, allPosts.map(function (post, index) {\n      return React.createElement(\"li\", {\n        key: post.id\n      }, React.createElement(\"div\", null, React.createElement(\"a\", {\n        href: post.url\n      }, post.title)));\n    })));\n  });\n}\n\nfunction loadMorePosts(allPosts, fetchMore) {\n  fetchMore({\n    variables: {\n      skip: allPosts.length\n    },\n    updateQuery: function updateQuery(previousResult, _ref2) {\n      var fetchMoreResult = _ref2.fetchMoreResult;\n\n      if (!fetchMoreResult) {\n        return previousResult;\n      }\n\n      return _Object$assign({}, previousResult, {\n        // Append the new posts results to the old one\n        allPosts: [].concat(_toConsumableArray(previousResult.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/Users/tylerbrooks/htdocs/repository/next/terp-next/pages/query.js"],"names":["Query","gql","Layout","Link","fetch","allPostsQuery","PostList","loading","error","data","allPosts","_allPostsMeta","fetchMore","areMorePosts","length","count","map","post","index","id","url","title","loadMorePosts","variables","skip","updateQuery","previousResult","fetchMoreResult"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,aAAa,GAAGJ,GAAH,mBAAnB,C,CAkBP;AACA;AACA;;AAEA,eAAe,SAASK,QAAT,GAAqB;AAClC,SACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAED;AAAd,KACG,gBAAsE;AAAA,QAAnEE,OAAmE,QAAnEA,OAAmE;AAAA,QAA1DC,KAA0D,QAA1DA,KAA0D;AAAA,yBAAnDC,IAAmD;AAAA,QAA3CC,QAA2C,aAA3CA,QAA2C;AAAA,QAAjCC,aAAiC,aAAjCA,aAAiC;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;AACrE,QAAIJ,KAAJ,EAAW,OAAO,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB,MAAP;AACX,QAAID,OAAJ,EAAa,OAAO,2CAAP;AAEb,QAAMM,YAAY,GAAGH,QAAQ,CAACI,MAAT,GAAkBH,aAAa,CAACI,KAArD;AACA,WACE,qCACE,gCACGL,QAAQ,CAACM,GAAT,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,aACZ;AAAI,QAAA,GAAG,EAAED,IAAI,CAACE;AAAd,SACE,iCACE;AAAG,QAAA,IAAI,EAAEF,IAAI,CAACG;AAAd,SAAoBH,IAAI,CAACI,KAAzB,CADF,CADF,CADY;AAAA,KAAb,CADH,CADF,CADF;AAaD,GAnBH,CADF;AAuBD;;AAED,SAASC,aAAT,CAAwBZ,QAAxB,EAAkCE,SAAlC,EAA6C;AAC3CA,EAAAA,SAAS,CAAC;AACRW,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEd,QAAQ,CAACI;AADN,KADH;AAIRW,IAAAA,WAAW,EAAE,qBAACC,cAAD,SAAyC;AAAA,UAAtBC,eAAsB,SAAtBA,eAAsB;;AACpD,UAAI,CAACA,eAAL,EAAsB;AACpB,eAAOD,cAAP;AACD;;AACD,aAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACvC;AACAhB,QAAAA,QAAQ,+BAAMgB,cAAc,CAAChB,QAArB,sBAAkCiB,eAAe,CAACjB,QAAlD;AAF+B,OAAlC,CAAP;AAID;AAZO,GAAD,CAAT;AAcD","sourcesContent":["import { Query } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport Layout from '../components/MyLayout.js'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\n\nexport const allPostsQuery = gql`\n  query allPosts($id:String!) {\n\t  article(id: $id) {\n\t    data {\n\t      id\n\t      title\n\t      subtitle\n\t      body\n\t      url\n\t      summary\n\t      hero_image {\n\t        url_1200_630\n\t      }\n\t    }\n\t  }\n\t}\n`\n\n// export const allPostsQueryVars = {\n//   limit: 5\n// }\n\nexport default function PostList () {\n  return (\n    <Query query={allPostsQuery}>\n      {({ loading, error, data: { allPosts, _allPostsMeta }, fetchMore }) => {\n        if (error) return <ErrorMessage message='Error loading posts.' />\n        if (loading) return <div>Loading</div>\n\n        const areMorePosts = allPosts.length < _allPostsMeta.count\n        return (\n          <section>\n            <ul>\n              {allPosts.map((post, index) => (\n                <li key={post.id}>\n                  <div>\n                    <a href={post.url}>{post.title}</a>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </section>\n        )\n      }}\n    </Query>\n  )\n}\n\nfunction loadMorePosts (allPosts, fetchMore) {\n  fetchMore({\n    variables: {\n      skip: allPosts.length\n    },\n    updateQuery: (previousResult, { fetchMoreResult }) => {\n      if (!fetchMoreResult) {\n        return previousResult\n      }\n      return Object.assign({}, previousResult, {\n        // Append the new posts results to the old one\n        allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n      })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}